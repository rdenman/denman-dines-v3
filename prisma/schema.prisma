// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  recipes  Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Recipe {
  id          String   @id @default(cuid())
  title       String   @db.Citext
  slug        String   @unique
  description String?
  photo       String?
  servings    Int?
  prepTime    Int? // in minutes
  cookTime    Int? // in minutes
  tips        String[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ingredientSections  IngredientSection[]
  instructionSections InstructionSection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([userId])
}

model IngredientSection {
  id    String @id @default(cuid())
  name  String
  order Int

  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredients Ingredient[]

  @@index([recipeId, order])
}

model Ingredient {
  id          String  @id @default(cuid())
  name        String
  amount      String?
  preparation String?
  order       Int

  sectionId String
  section   IngredientSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId, order])
}

model InstructionSection {
  id    String @id @default(cuid())
  name  String
  order Int

  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  instructions Instruction[]

  @@index([recipeId, order])
}

model Instruction {
  id    String @id @default(cuid())
  text  String
  order Int

  sectionId String
  section   InstructionSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId, order])
}
